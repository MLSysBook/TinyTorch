#!/usr/bin/env python3
"""
Fix Unicode characters in module files that cause syntax errors.
"""

import os
import re

def fix_unicode_in_file(filepath):
    """Fix Unicode characters in a Python file."""
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            content = f.read()

        # Track if changes were made
        original_content = content

        # Common Unicode fixes for Python compatibility
        replacements = {
            '‚îÇ': '|',           # Box drawing vertical
            '‚îú': '+',           # Box drawing vertical and right
            '‚îº': '+',           # Box drawing vertical and horizontal
            '‚î¥': '+',           # Box drawing up and horizontal
            '‚î¨': '+',           # Box drawing down and horizontal
            '‚ï≠': '+',           # Box drawing arc top left
            '‚ïÆ': '+',           # Box drawing arc top right
            '‚ï∞': '+',           # Box drawing arc bottom left
            '‚ïØ': '+',           # Box drawing arc bottom right
            '‚îÄ': '-',           # Box drawing horizontal
            '‚îî': '+',           # Box drawing up and right
            '‚îò': '+',           # Box drawing up and left
            '‚îê': '+',           # Box drawing down and left
            '‚îå': '+',           # Box drawing down and right
            '‚Üí': '->',          # Right arrow
            '‚Üê': '<-',          # Left arrow
            '‚Üì': 'v',           # Down arrow
            '‚Üë': '^',           # Up arrow
            '‚ñ≤': '^',           # Triangle up
            '‚ñ∫': '>',           # Triangle right
            '‚óÑ': '<',           # Triangle left
            '‚ñº': 'v',           # Triangle down
            '‚ï±': '/',           # Box drawing diagonal upper right to lower left
            '‚ï≤': '\\',          # Box drawing diagonal upper left to lower right
            '‚ïê': '=',           # Double horizontal line
            '‚ïë': '|',           # Double vertical line
            '‚ïî': '+',           # Double line box drawing
            '‚ïó': '+',
            '‚ïö': '+',
            '‚ïù': '+',
            '‚ï†': '+',
            '‚ï£': '+',
            '‚ï¶': '+',
            '‚ï©': '+',
            '‚ï¨': '+',
            '‚â•': '>=',          # Greater than or equal
            '‚â§': '<=',          # Less than or equal
            '√ó': '*',           # Multiplication sign
            '√∑': '/',           # Division sign
            '‚àÇ': 'd',           # Partial derivative
            '‚àá': 'grad',        # Nabla (gradient)
            'Œ£': 'Sum',         # Sigma (summation)
            '‚àë': 'sum',         # Summation
            '‚àö': 'sqrt',        # Square root
            '‚àû': 'inf',         # Infinity
            '‚â†': '!=',          # Not equal
            '‚âà': '~=',          # Approximately equal
            '‚àà': 'in',          # Element of
            '‚àâ': 'not in',      # Not element of
            '‚ö†': 'WARNING',     # Warning sign
            '‚úì': 'OK',          # Check mark
            '‚úÖ': 'PASS',       # Check mark button
            '‚ùå': 'FAIL',       # Cross mark
            'üí°': 'TIP',        # Light bulb
            'üí•': 'CRASH',      # Explosion
            'üî•': 'FIRE',       # Fire
            'üîó': 'LINK',       # Link
            'üöÄ': 'ROCKET',     # Rocket
            'üéØ': 'TARGET',     # Target
            'üîç': 'MAGNIFY',    # Magnifying glass
            'ü§î': 'THINK',      # Thinking face
            'üß™': 'TEST',       # Test tube
            'üìà': 'PROGRESS',   # Chart increasing
            'üì¶': 'PACKAGE',    # Package
            'üéâ': 'CELEBRATE',  # Party
            '‚ö°': 'SPEED',      # Lightning
        }

        # Apply replacements
        for unicode_char, replacement in replacements.items():
            content = content.replace(unicode_char, replacement)

        # Write back if changes were made
        if content != original_content:
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(content)
            print(f"Fixed Unicode characters in: {filepath}")
            return True

        return False

    except Exception as e:
        print(f"Error processing {filepath}: {e}")
        return False

def main():
    """Fix Unicode in all module files."""
    modules_dir = '/Users/VJ/GitHub/TinyTorch/modules'
    fixed_count = 0

    # Find all Python files in modules
    for root, dirs, files in os.walk(modules_dir):
        for file in files:
            if file.endswith('_dev.py'):
                filepath = os.path.join(root, file)
                if fix_unicode_in_file(filepath):
                    fixed_count += 1

    print(f"\nFixed Unicode characters in {fixed_count} files.")

if __name__ == '__main__':
    main()