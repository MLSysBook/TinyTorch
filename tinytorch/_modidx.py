# ╔═══════════════════════════════════════════════════════════════════════════════╗
# ║                        🚨 CRITICAL WARNING 🚨                                ║
# ║                     AUTOGENERATED! DO NOT EDIT!                              ║
# ║                                                                               ║
# ║  This file is AUTOMATICALLY GENERATED from source modules.                   ║
# ║  ANY CHANGES MADE HERE WILL BE LOST when modules are re-exported!            ║
# ║                                                                               ║
# ║  ✅ TO EDIT: modules/source/[unknown]/[unknown]_dev.py              ║
# ║  ✅ TO EXPORT: Run 'tito module complete <module_name>'                      ║
# ║                                                                               ║
# ║  🛡️ STUDENT PROTECTION: This file contains optimized implementations.        ║
# ║     Editing it directly may break module functionality and training.         ║
# ║                                                                               ║
# ║  🎓 LEARNING TIP: Work in modules/source/ - that's where real development    ║
# ║     happens! The tinytorch/ directory is just the compiled output.           ║
# ╚═══════════════════════════════════════════════════════════════════════════════╝
# Autogenerated by nbdev

d = { 'settings': { 'branch': 'main',
                'doc_baseurl': '/TinyTorch/',
                'doc_host': 'https://tinytorch.github.io',
                'git_url': 'https://github.com/tinytorch/TinyTorch/',
                'lib_path': 'tinytorch'},
  'syms': { 'tinytorch.core.activations': { 'tinytorch.core.activations.GELU': ( '02_activations/activations_dev.html#gelu',
                                                                                 'tinytorch/core/activations.py'),
                                            'tinytorch.core.activations.GELU.backward': ( '02_activations/activations_dev.html#gelu.backward',
                                                                                          'tinytorch/core/activations.py'),
                                            'tinytorch.core.activations.GELU.forward': ( '02_activations/activations_dev.html#gelu.forward',
                                                                                         'tinytorch/core/activations.py'),
                                            'tinytorch.core.activations.ReLU': ( '02_activations/activations_dev.html#relu',
                                                                                 'tinytorch/core/activations.py'),
                                            'tinytorch.core.activations.ReLU.backward': ( '02_activations/activations_dev.html#relu.backward',
                                                                                          'tinytorch/core/activations.py'),
                                            'tinytorch.core.activations.ReLU.forward': ( '02_activations/activations_dev.html#relu.forward',
                                                                                         'tinytorch/core/activations.py'),
                                            'tinytorch.core.activations.Sigmoid': ( '02_activations/activations_dev.html#sigmoid',
                                                                                    'tinytorch/core/activations.py'),
                                            'tinytorch.core.activations.Sigmoid.backward': ( '02_activations/activations_dev.html#sigmoid.backward',
                                                                                             'tinytorch/core/activations.py'),
                                            'tinytorch.core.activations.Sigmoid.forward': ( '02_activations/activations_dev.html#sigmoid.forward',
                                                                                            'tinytorch/core/activations.py'),
                                            'tinytorch.core.activations.Softmax': ( '02_activations/activations_dev.html#softmax',
                                                                                    'tinytorch/core/activations.py'),
                                            'tinytorch.core.activations.Softmax.backward': ( '02_activations/activations_dev.html#softmax.backward',
                                                                                             'tinytorch/core/activations.py'),
                                            'tinytorch.core.activations.Softmax.forward': ( '02_activations/activations_dev.html#softmax.forward',
                                                                                            'tinytorch/core/activations.py'),
                                            'tinytorch.core.activations.Tanh': ( '02_activations/activations_dev.html#tanh',
                                                                                 'tinytorch/core/activations.py'),
                                            'tinytorch.core.activations.Tanh.backward': ( '02_activations/activations_dev.html#tanh.backward',
                                                                                          'tinytorch/core/activations.py'),
                                            'tinytorch.core.activations.Tanh.forward': ( '02_activations/activations_dev.html#tanh.forward',
                                                                                         'tinytorch/core/activations.py')},
            'tinytorch.core.attention': { 'tinytorch.core.attention.AttentionEfficiencyProfiler': ( '12_attention/attention_dev.html#attentionefficiencyprofiler',
                                                                                                    'tinytorch/core/attention.py'),
                                          'tinytorch.core.attention.AttentionEfficiencyProfiler.__init__': ( '12_attention/attention_dev.html#attentionefficiencyprofiler.__init__',
                                                                                                             'tinytorch/core/attention.py'),
                                          'tinytorch.core.attention.AttentionEfficiencyProfiler._analyze_attention_scaling': ( '12_attention/attention_dev.html#attentionefficiencyprofiler._analyze_attention_scaling',
                                                                                                                               'tinytorch/core/attention.py'),
                                          'tinytorch.core.attention.AttentionEfficiencyProfiler._generate_attention_optimizations': ( '12_attention/attention_dev.html#attentionefficiencyprofiler._generate_attention_optimizations',
                                                                                                                                      'tinytorch/core/attention.py'),
                                          'tinytorch.core.attention.AttentionEfficiencyProfiler.analyze_multi_head_efficiency': ( '12_attention/attention_dev.html#attentionefficiencyprofiler.analyze_multi_head_efficiency',
                                                                                                                                  'tinytorch/core/attention.py'),
                                          'tinytorch.core.attention.AttentionEfficiencyProfiler.profile_attention_scaling': ( '12_attention/attention_dev.html#attentionefficiencyprofiler.profile_attention_scaling',
                                                                                                                              'tinytorch/core/attention.py'),
                                          'tinytorch.core.attention.SelfAttention': ( '12_attention/attention_dev.html#selfattention',
                                                                                      'tinytorch/core/attention.py'),
                                          'tinytorch.core.attention.SelfAttention.__call__': ( '12_attention/attention_dev.html#selfattention.__call__',
                                                                                               'tinytorch/core/attention.py'),
                                          'tinytorch.core.attention.SelfAttention.__init__': ( '12_attention/attention_dev.html#selfattention.__init__',
                                                                                               'tinytorch/core/attention.py'),
                                          'tinytorch.core.attention.SelfAttention.forward': ( '12_attention/attention_dev.html#selfattention.forward',
                                                                                              'tinytorch/core/attention.py'),
                                          'tinytorch.core.attention.create_bidirectional_mask': ( '12_attention/attention_dev.html#create_bidirectional_mask',
                                                                                                  'tinytorch/core/attention.py'),
                                          'tinytorch.core.attention.create_causal_mask': ( '12_attention/attention_dev.html#create_causal_mask',
                                                                                           'tinytorch/core/attention.py'),
                                          'tinytorch.core.attention.create_padding_mask': ( '12_attention/attention_dev.html#create_padding_mask',
                                                                                            'tinytorch/core/attention.py'),
                                          'tinytorch.core.attention.scaled_dot_product_attention': ( '12_attention/attention_dev.html#scaled_dot_product_attention',
                                                                                                     'tinytorch/core/attention.py')},
            'tinytorch.core.autograd': {},
            'tinytorch.core.benchmarking': { 'tinytorch.core.benchmarking.BenchmarkResult': ( 'temp_holding/14_benchmarking/benchmarking_dev.html#benchmarkresult',
                                                                                              'tinytorch/core/benchmarking.py'),
                                             'tinytorch.core.benchmarking.BenchmarkScenario': ( 'temp_holding/14_benchmarking/benchmarking_dev.html#benchmarkscenario',
                                                                                                'tinytorch/core/benchmarking.py'),
                                             'tinytorch.core.benchmarking.BenchmarkScenarios': ( 'temp_holding/14_benchmarking/benchmarking_dev.html#benchmarkscenarios',
                                                                                                 'tinytorch/core/benchmarking.py'),
                                             'tinytorch.core.benchmarking.BenchmarkScenarios.__init__': ( 'temp_holding/14_benchmarking/benchmarking_dev.html#benchmarkscenarios.__init__',
                                                                                                          'tinytorch/core/benchmarking.py'),
                                             'tinytorch.core.benchmarking.BenchmarkScenarios.offline': ( 'temp_holding/14_benchmarking/benchmarking_dev.html#benchmarkscenarios.offline',
                                                                                                         'tinytorch/core/benchmarking.py'),
                                             'tinytorch.core.benchmarking.BenchmarkScenarios.server': ( 'temp_holding/14_benchmarking/benchmarking_dev.html#benchmarkscenarios.server',
                                                                                                        'tinytorch/core/benchmarking.py'),
                                             'tinytorch.core.benchmarking.BenchmarkScenarios.single_stream': ( 'temp_holding/14_benchmarking/benchmarking_dev.html#benchmarkscenarios.single_stream',
                                                                                                               'tinytorch/core/benchmarking.py'),
                                             'tinytorch.core.benchmarking.PerformanceReporter': ( 'temp_holding/14_benchmarking/benchmarking_dev.html#performancereporter',
                                                                                                  'tinytorch/core/benchmarking.py'),
                                             'tinytorch.core.benchmarking.PerformanceReporter.__init__': ( 'temp_holding/14_benchmarking/benchmarking_dev.html#performancereporter.__init__',
                                                                                                           'tinytorch/core/benchmarking.py'),
                                             'tinytorch.core.benchmarking.PerformanceReporter.generate_project_report': ( 'temp_holding/14_benchmarking/benchmarking_dev.html#performancereporter.generate_project_report',
                                                                                                                          'tinytorch/core/benchmarking.py'),
                                             'tinytorch.core.benchmarking.PerformanceReporter.save_report': ( 'temp_holding/14_benchmarking/benchmarking_dev.html#performancereporter.save_report',
                                                                                                              'tinytorch/core/benchmarking.py'),
                                             'tinytorch.core.benchmarking.ProductionBenchmarkingProfiler': ( 'temp_holding/14_benchmarking/benchmarking_dev.html#productionbenchmarkingprofiler',
                                                                                                             'tinytorch/core/benchmarking.py'),
                                             'tinytorch.core.benchmarking.ProductionBenchmarkingProfiler.__init__': ( 'temp_holding/14_benchmarking/benchmarking_dev.html#productionbenchmarkingprofiler.__init__',
                                                                                                                      'tinytorch/core/benchmarking.py'),
                                             'tinytorch.core.benchmarking.ProductionBenchmarkingProfiler._generate_ab_recommendation': ( 'temp_holding/14_benchmarking/benchmarking_dev.html#productionbenchmarkingprofiler._generate_ab_recommendation',
                                                                                                                                         'tinytorch/core/benchmarking.py'),
                                             'tinytorch.core.benchmarking.ProductionBenchmarkingProfiler.detect_performance_regression': ( 'temp_holding/14_benchmarking/benchmarking_dev.html#productionbenchmarkingprofiler.detect_performance_regression',
                                                                                                                                           'tinytorch/core/benchmarking.py'),
                                             'tinytorch.core.benchmarking.ProductionBenchmarkingProfiler.generate_capacity_planning_report': ( 'temp_holding/14_benchmarking/benchmarking_dev.html#productionbenchmarkingprofiler.generate_capacity_planning_report',
                                                                                                                                               'tinytorch/core/benchmarking.py'),
                                             'tinytorch.core.benchmarking.ProductionBenchmarkingProfiler.monitor_resource_utilization': ( 'temp_holding/14_benchmarking/benchmarking_dev.html#productionbenchmarkingprofiler.monitor_resource_utilization',
                                                                                                                                          'tinytorch/core/benchmarking.py'),
                                             'tinytorch.core.benchmarking.ProductionBenchmarkingProfiler.profile_end_to_end_pipeline': ( 'temp_holding/14_benchmarking/benchmarking_dev.html#productionbenchmarkingprofiler.profile_end_to_end_pipeline',
                                                                                                                                         'tinytorch/core/benchmarking.py'),
                                             'tinytorch.core.benchmarking.ProductionBenchmarkingProfiler.run_ab_test': ( 'temp_holding/14_benchmarking/benchmarking_dev.html#productionbenchmarkingprofiler.run_ab_test',
                                                                                                                         'tinytorch/core/benchmarking.py'),
                                             'tinytorch.core.benchmarking.ProductionBenchmarkingProfiler.setup_ab_testing_framework': ( 'temp_holding/14_benchmarking/benchmarking_dev.html#productionbenchmarkingprofiler.setup_ab_testing_framework',
                                                                                                                                        'tinytorch/core/benchmarking.py'),
                                             'tinytorch.core.benchmarking.StatisticalValidation': ( 'temp_holding/14_benchmarking/benchmarking_dev.html#statisticalvalidation',
                                                                                                    'tinytorch/core/benchmarking.py'),
                                             'tinytorch.core.benchmarking.StatisticalValidator': ( 'temp_holding/14_benchmarking/benchmarking_dev.html#statisticalvalidator',
                                                                                                   'tinytorch/core/benchmarking.py'),
                                             'tinytorch.core.benchmarking.StatisticalValidator.__init__': ( 'temp_holding/14_benchmarking/benchmarking_dev.html#statisticalvalidator.__init__',
                                                                                                            'tinytorch/core/benchmarking.py'),
                                             'tinytorch.core.benchmarking.StatisticalValidator.validate_benchmark_result': ( 'temp_holding/14_benchmarking/benchmarking_dev.html#statisticalvalidator.validate_benchmark_result',
                                                                                                                             'tinytorch/core/benchmarking.py'),
                                             'tinytorch.core.benchmarking.StatisticalValidator.validate_comparison': ( 'temp_holding/14_benchmarking/benchmarking_dev.html#statisticalvalidator.validate_comparison',
                                                                                                                       'tinytorch/core/benchmarking.py'),
                                             'tinytorch.core.benchmarking.TinyTorchPerf': ( 'temp_holding/14_benchmarking/benchmarking_dev.html#tinytorchperf',
                                                                                            'tinytorch/core/benchmarking.py'),
                                             'tinytorch.core.benchmarking.TinyTorchPerf.__init__': ( 'temp_holding/14_benchmarking/benchmarking_dev.html#tinytorchperf.__init__',
                                                                                                     'tinytorch/core/benchmarking.py'),
                                             'tinytorch.core.benchmarking.TinyTorchPerf.compare_models': ( 'temp_holding/14_benchmarking/benchmarking_dev.html#tinytorchperf.compare_models',
                                                                                                           'tinytorch/core/benchmarking.py'),
                                             'tinytorch.core.benchmarking.TinyTorchPerf.generate_report': ( 'temp_holding/14_benchmarking/benchmarking_dev.html#tinytorchperf.generate_report',
                                                                                                            'tinytorch/core/benchmarking.py'),
                                             'tinytorch.core.benchmarking.TinyTorchPerf.run_all_scenarios': ( 'temp_holding/14_benchmarking/benchmarking_dev.html#tinytorchperf.run_all_scenarios',
                                                                                                              'tinytorch/core/benchmarking.py'),
                                             'tinytorch.core.benchmarking.TinyTorchPerf.run_offline': ( 'temp_holding/14_benchmarking/benchmarking_dev.html#tinytorchperf.run_offline',
                                                                                                        'tinytorch/core/benchmarking.py'),
                                             'tinytorch.core.benchmarking.TinyTorchPerf.run_server': ( 'temp_holding/14_benchmarking/benchmarking_dev.html#tinytorchperf.run_server',
                                                                                                       'tinytorch/core/benchmarking.py'),
                                             'tinytorch.core.benchmarking.TinyTorchPerf.run_single_stream': ( 'temp_holding/14_benchmarking/benchmarking_dev.html#tinytorchperf.run_single_stream',
                                                                                                              'tinytorch/core/benchmarking.py'),
                                             'tinytorch.core.benchmarking.TinyTorchPerf.set_dataset': ( 'temp_holding/14_benchmarking/benchmarking_dev.html#tinytorchperf.set_dataset',
                                                                                                        'tinytorch/core/benchmarking.py'),
                                             'tinytorch.core.benchmarking.TinyTorchPerf.set_model': ( 'temp_holding/14_benchmarking/benchmarking_dev.html#tinytorchperf.set_model',
                                                                                                      'tinytorch/core/benchmarking.py'),
                                             'tinytorch.core.benchmarking.plot_benchmark_results': ( 'temp_holding/14_benchmarking/benchmarking_dev.html#plot_benchmark_results',
                                                                                                     'tinytorch/core/benchmarking.py')},
            'tinytorch.core.cnn': { 'tinytorch.core.cnn.Conv2D': ('06_spatial/spatial_dev.html#conv2d', 'tinytorch/core/cnn.py'),
                                    'tinytorch.core.cnn.Conv2D.__call__': ( '06_spatial/spatial_dev.html#conv2d.__call__',
                                                                            'tinytorch/core/cnn.py'),
                                    'tinytorch.core.cnn.Conv2D.__init__': ( '06_spatial/spatial_dev.html#conv2d.__init__',
                                                                            'tinytorch/core/cnn.py'),
                                    'tinytorch.core.cnn.Conv2D.forward': ( '06_spatial/spatial_dev.html#conv2d.forward',
                                                                           'tinytorch/core/cnn.py'),
                                    'tinytorch.core.cnn._should_show_plots': ( '06_spatial/spatial_dev.html#_should_show_plots',
                                                                               'tinytorch/core/cnn.py'),
                                    'tinytorch.core.cnn.conv2d_naive': ( '06_spatial/spatial_dev.html#conv2d_naive',
                                                                         'tinytorch/core/cnn.py'),
                                    'tinytorch.core.cnn.flatten': ('06_spatial/spatial_dev.html#flatten', 'tinytorch/core/cnn.py')},
            'tinytorch.core.compression': { 'tinytorch.core.compression.CompressionMetrics': ( 'temp_holding/16_regularization/regularization_dev.html#compressionmetrics',
                                                                                               'tinytorch/core/compression.py'),
                                            'tinytorch.core.compression.CompressionMetrics.__init__': ( 'temp_holding/16_regularization/regularization_dev.html#compressionmetrics.__init__',
                                                                                                        'tinytorch/core/compression.py'),
                                            'tinytorch.core.compression.CompressionMetrics.calculate_model_size': ( 'temp_holding/16_regularization/regularization_dev.html#compressionmetrics.calculate_model_size',
                                                                                                                    'tinytorch/core/compression.py'),
                                            'tinytorch.core.compression.CompressionMetrics.count_parameters': ( 'temp_holding/16_regularization/regularization_dev.html#compressionmetrics.count_parameters',
                                                                                                                'tinytorch/core/compression.py'),
                                            'tinytorch.core.compression.CompressionSystemsProfiler': ( 'temp_holding/16_regularization/regularization_dev.html#compressionsystemsprofiler',
                                                                                                       'tinytorch/core/compression.py'),
                                            'tinytorch.core.compression.CompressionSystemsProfiler.__init__': ( 'temp_holding/16_regularization/regularization_dev.html#compressionsystemsprofiler.__init__',
                                                                                                                'tinytorch/core/compression.py'),
                                            'tinytorch.core.compression.CompressionSystemsProfiler._apply_magnitude_pruning': ( 'temp_holding/16_regularization/regularization_dev.html#compressionsystemsprofiler._apply_magnitude_pruning',
                                                                                                                                'tinytorch/core/compression.py'),
                                            'tinytorch.core.compression.CompressionSystemsProfiler._apply_quantization': ( 'temp_holding/16_regularization/regularization_dev.html#compressionsystemsprofiler._apply_quantization',
                                                                                                                           'tinytorch/core/compression.py'),
                                            'tinytorch.core.compression.CompressionSystemsProfiler._apply_structured_pruning': ( 'temp_holding/16_regularization/regularization_dev.html#compressionsystemsprofiler._apply_structured_pruning',
                                                                                                                                 'tinytorch/core/compression.py'),
                                            'tinytorch.core.compression.CompressionSystemsProfiler._calculate_model_flops': ( 'temp_holding/16_regularization/regularization_dev.html#compressionsystemsprofiler._calculate_model_flops',
                                                                                                                              'tinytorch/core/compression.py'),
                                            'tinytorch.core.compression.CompressionSystemsProfiler.analyze_accuracy_tradeoffs': ( 'temp_holding/16_regularization/regularization_dev.html#compressionsystemsprofiler.analyze_accuracy_tradeoffs',
                                                                                                                                  'tinytorch/core/compression.py'),
                                            'tinytorch.core.compression.CompressionSystemsProfiler.analyze_quantization_impact': ( 'temp_holding/16_regularization/regularization_dev.html#compressionsystemsprofiler.analyze_quantization_impact',
                                                                                                                                   'tinytorch/core/compression.py'),
                                            'tinytorch.core.compression.CompressionSystemsProfiler.measure_inference_speedup': ( 'temp_holding/16_regularization/regularization_dev.html#compressionsystemsprofiler.measure_inference_speedup',
                                                                                                                                 'tinytorch/core/compression.py'),
                                            'tinytorch.core.compression.DistillationLoss': ( 'temp_holding/16_regularization/regularization_dev.html#distillationloss',
                                                                                             'tinytorch/core/compression.py'),
                                            'tinytorch.core.compression.DistillationLoss.__call__': ( 'temp_holding/16_regularization/regularization_dev.html#distillationloss.__call__',
                                                                                                      'tinytorch/core/compression.py'),
                                            'tinytorch.core.compression.DistillationLoss.__init__': ( 'temp_holding/16_regularization/regularization_dev.html#distillationloss.__init__',
                                                                                                      'tinytorch/core/compression.py'),
                                            'tinytorch.core.compression.DistillationLoss._cross_entropy_loss': ( 'temp_holding/16_regularization/regularization_dev.html#distillationloss._cross_entropy_loss',
                                                                                                                 'tinytorch/core/compression.py'),
                                            'tinytorch.core.compression.DistillationLoss._softmax': ( 'temp_holding/16_regularization/regularization_dev.html#distillationloss._softmax',
                                                                                                      'tinytorch/core/compression.py'),
                                            'tinytorch.core.compression.calculate_sparsity': ( 'temp_holding/16_regularization/regularization_dev.html#calculate_sparsity',
                                                                                               'tinytorch/core/compression.py'),
                                            'tinytorch.core.compression.compare_compression_techniques': ( 'temp_holding/16_regularization/regularization_dev.html#compare_compression_techniques',
                                                                                                           'tinytorch/core/compression.py'),
                                            'tinytorch.core.compression.compute_neuron_importance': ( 'temp_holding/16_regularization/regularization_dev.html#compute_neuron_importance',
                                                                                                      'tinytorch/core/compression.py'),
                                            'tinytorch.core.compression.prune_layer_neurons': ( 'temp_holding/16_regularization/regularization_dev.html#prune_layer_neurons',
                                                                                                'tinytorch/core/compression.py'),
                                            'tinytorch.core.compression.prune_weights_by_magnitude': ( 'temp_holding/16_regularization/regularization_dev.html#prune_weights_by_magnitude',
                                                                                                       'tinytorch/core/compression.py'),
                                            'tinytorch.core.compression.quantize_layer_weights': ( 'temp_holding/16_regularization/regularization_dev.html#quantize_layer_weights',
                                                                                                   'tinytorch/core/compression.py'),
                                            'tinytorch.core.compression.setup_import_paths': ( 'temp_holding/16_regularization/regularization_dev.html#setup_import_paths',
                                                                                               'tinytorch/core/compression.py')},
            'tinytorch.core.dataloader': { 'tinytorch.core.dataloader.CIFAR10Dataset': ( '07_dataloader/dataloader_dev.html#cifar10dataset',
                                                                                         'tinytorch/core/dataloader.py'),
                                           'tinytorch.core.dataloader.CIFAR10Dataset.__getitem__': ( '07_dataloader/dataloader_dev.html#cifar10dataset.__getitem__',
                                                                                                     'tinytorch/core/dataloader.py'),
                                           'tinytorch.core.dataloader.CIFAR10Dataset.__init__': ( '07_dataloader/dataloader_dev.html#cifar10dataset.__init__',
                                                                                                  'tinytorch/core/dataloader.py'),
                                           'tinytorch.core.dataloader.CIFAR10Dataset.__len__': ( '07_dataloader/dataloader_dev.html#cifar10dataset.__len__',
                                                                                                 'tinytorch/core/dataloader.py'),
                                           'tinytorch.core.dataloader.CIFAR10Dataset.get_num_classes': ( '07_dataloader/dataloader_dev.html#cifar10dataset.get_num_classes',
                                                                                                         'tinytorch/core/dataloader.py'),
                                           'tinytorch.core.dataloader.DataLoader': ( '07_dataloader/dataloader_dev.html#dataloader',
                                                                                     'tinytorch/core/dataloader.py'),
                                           'tinytorch.core.dataloader.DataLoader.__init__': ( '07_dataloader/dataloader_dev.html#dataloader.__init__',
                                                                                              'tinytorch/core/dataloader.py'),
                                           'tinytorch.core.dataloader.DataLoader.__iter__': ( '07_dataloader/dataloader_dev.html#dataloader.__iter__',
                                                                                              'tinytorch/core/dataloader.py'),
                                           'tinytorch.core.dataloader.DataLoader.__len__': ( '07_dataloader/dataloader_dev.html#dataloader.__len__',
                                                                                             'tinytorch/core/dataloader.py'),
                                           'tinytorch.core.dataloader.Dataset': ( '07_dataloader/dataloader_dev.html#dataset',
                                                                                  'tinytorch/core/dataloader.py'),
                                           'tinytorch.core.dataloader.Dataset.__getitem__': ( '07_dataloader/dataloader_dev.html#dataset.__getitem__',
                                                                                              'tinytorch/core/dataloader.py'),
                                           'tinytorch.core.dataloader.Dataset.__len__': ( '07_dataloader/dataloader_dev.html#dataset.__len__',
                                                                                          'tinytorch/core/dataloader.py'),
                                           'tinytorch.core.dataloader.Dataset.get_num_classes': ( '07_dataloader/dataloader_dev.html#dataset.get_num_classes',
                                                                                                  'tinytorch/core/dataloader.py'),
                                           'tinytorch.core.dataloader.Dataset.get_sample_shape': ( '07_dataloader/dataloader_dev.html#dataset.get_sample_shape',
                                                                                                   'tinytorch/core/dataloader.py'),
                                           'tinytorch.core.dataloader.SimpleDataset': ( '07_dataloader/dataloader_dev.html#simpledataset',
                                                                                        'tinytorch/core/dataloader.py'),
                                           'tinytorch.core.dataloader.SimpleDataset.__getitem__': ( '07_dataloader/dataloader_dev.html#simpledataset.__getitem__',
                                                                                                    'tinytorch/core/dataloader.py'),
                                           'tinytorch.core.dataloader.SimpleDataset.__init__': ( '07_dataloader/dataloader_dev.html#simpledataset.__init__',
                                                                                                 'tinytorch/core/dataloader.py'),
                                           'tinytorch.core.dataloader.SimpleDataset.__len__': ( '07_dataloader/dataloader_dev.html#simpledataset.__len__',
                                                                                                'tinytorch/core/dataloader.py'),
                                           'tinytorch.core.dataloader.SimpleDataset.get_num_classes': ( '07_dataloader/dataloader_dev.html#simpledataset.get_num_classes',
                                                                                                        'tinytorch/core/dataloader.py'),
                                           'tinytorch.core.dataloader.download_cifar10': ( '07_dataloader/dataloader_dev.html#download_cifar10',
                                                                                           'tinytorch/core/dataloader.py')},
            'tinytorch.core.dense': { 'tinytorch.core.dense.MLP': ('05_networks/networks_dev.html#mlp', 'tinytorch/core/dense.py'),
                                      'tinytorch.core.dense.MLP.__call__': ( '05_networks/networks_dev.html#mlp.__call__',
                                                                             'tinytorch/core/dense.py'),
                                      'tinytorch.core.dense.MLP.__init__': ( '05_networks/networks_dev.html#mlp.__init__',
                                                                             'tinytorch/core/dense.py'),
                                      'tinytorch.core.dense.MLP.forward': ( '05_networks/networks_dev.html#mlp.forward',
                                                                            'tinytorch/core/dense.py'),
                                      'tinytorch.core.dense.Sequential': ( '05_networks/networks_dev.html#sequential',
                                                                           'tinytorch/core/dense.py'),
                                      'tinytorch.core.dense.Sequential.__call__': ( '05_networks/networks_dev.html#sequential.__call__',
                                                                                    'tinytorch/core/dense.py'),
                                      'tinytorch.core.dense.Sequential.__init__': ( '05_networks/networks_dev.html#sequential.__init__',
                                                                                    'tinytorch/core/dense.py'),
                                      'tinytorch.core.dense.Sequential.add': ( '05_networks/networks_dev.html#sequential.add',
                                                                               'tinytorch/core/dense.py'),
                                      'tinytorch.core.dense.Sequential.forward': ( '05_networks/networks_dev.html#sequential.forward',
                                                                                   'tinytorch/core/dense.py'),
                                      'tinytorch.core.dense.create_mlp': ( '05_networks/networks_dev.html#create_mlp',
                                                                           'tinytorch/core/dense.py')},
            'tinytorch.core.kernels': { 'tinytorch.core.kernels.KernelOptimizationProfiler': ( 'temp_holding/13_kernels/kernels_dev.html#kerneloptimizationprofiler',
                                                                                               'tinytorch/core/kernels.py'),
                                        'tinytorch.core.kernels.KernelOptimizationProfiler.__init__': ( 'temp_holding/13_kernels/kernels_dev.html#kerneloptimizationprofiler.__init__',
                                                                                                        'tinytorch/core/kernels.py'),
                                        'tinytorch.core.kernels.KernelOptimizationProfiler._calculate_communication_overhead': ( 'temp_holding/13_kernels/kernels_dev.html#kerneloptimizationprofiler._calculate_communication_overhead',
                                                                                                                                 'tinytorch/core/kernels.py'),
                                        'tinytorch.core.kernels.KernelOptimizationProfiler._calculate_memory_transactions': ( 'temp_holding/13_kernels/kernels_dev.html#kerneloptimizationprofiler._calculate_memory_transactions',
                                                                                                                              'tinytorch/core/kernels.py'),
                                        'tinytorch.core.kernels.KernelOptimizationProfiler._detect_hardware': ( 'temp_holding/13_kernels/kernels_dev.html#kerneloptimizationprofiler._detect_hardware',
                                                                                                                'tinytorch/core/kernels.py'),
                                        'tinytorch.core.kernels.KernelOptimizationProfiler._estimate_bank_conflicts': ( 'temp_holding/13_kernels/kernels_dev.html#kerneloptimizationprofiler._estimate_bank_conflicts',
                                                                                                                        'tinytorch/core/kernels.py'),
                                        'tinytorch.core.kernels.KernelOptimizationProfiler._generate_divergence_optimizations': ( 'temp_holding/13_kernels/kernels_dev.html#kerneloptimizationprofiler._generate_divergence_optimizations',
                                                                                                                                  'tinytorch/core/kernels.py'),
                                        'tinytorch.core.kernels.KernelOptimizationProfiler._get_multi_gpu_optimizations': ( 'temp_holding/13_kernels/kernels_dev.html#kerneloptimizationprofiler._get_multi_gpu_optimizations',
                                                                                                                            'tinytorch/core/kernels.py'),
                                        'tinytorch.core.kernels.KernelOptimizationProfiler._get_tensor_core_requirements': ( 'temp_holding/13_kernels/kernels_dev.html#kerneloptimizationprofiler._get_tensor_core_requirements',
                                                                                                                             'tinytorch/core/kernels.py'),
                                        'tinytorch.core.kernels.KernelOptimizationProfiler._identify_bottlenecks': ( 'temp_holding/13_kernels/kernels_dev.html#kerneloptimizationprofiler._identify_bottlenecks',
                                                                                                                     'tinytorch/core/kernels.py'),
                                        'tinytorch.core.kernels.KernelOptimizationProfiler._identify_shared_memory_optimizations': ( 'temp_holding/13_kernels/kernels_dev.html#kerneloptimizationprofiler._identify_shared_memory_optimizations',
                                                                                                                                     'tinytorch/core/kernels.py'),
                                        'tinytorch.core.kernels.KernelOptimizationProfiler._sequence_contains_pattern': ( 'temp_holding/13_kernels/kernels_dev.html#kerneloptimizationprofiler._sequence_contains_pattern',
                                                                                                                          'tinytorch/core/kernels.py'),
                                        'tinytorch.core.kernels.KernelOptimizationProfiler.analyze_cuda_kernel_performance': ( 'temp_holding/13_kernels/kernels_dev.html#kerneloptimizationprofiler.analyze_cuda_kernel_performance',
                                                                                                                               'tinytorch/core/kernels.py'),
                                        'tinytorch.core.kernels.KernelOptimizationProfiler.analyze_kernel_fusion_opportunities': ( 'temp_holding/13_kernels/kernels_dev.html#kerneloptimizationprofiler.analyze_kernel_fusion_opportunities',
                                                                                                                                   'tinytorch/core/kernels.py'),
                                        'tinytorch.core.kernels.KernelOptimizationProfiler.analyze_memory_coalescing': ( 'temp_holding/13_kernels/kernels_dev.html#kerneloptimizationprofiler.analyze_memory_coalescing',
                                                                                                                         'tinytorch/core/kernels.py'),
                                        'tinytorch.core.kernels.KernelOptimizationProfiler.analyze_multi_gpu_scaling': ( 'temp_holding/13_kernels/kernels_dev.html#kerneloptimizationprofiler.analyze_multi_gpu_scaling',
                                                                                                                         'tinytorch/core/kernels.py'),
                                        'tinytorch.core.kernels.KernelOptimizationProfiler.analyze_shared_memory_usage': ( 'temp_holding/13_kernels/kernels_dev.html#kerneloptimizationprofiler.analyze_shared_memory_usage',
                                                                                                                           'tinytorch/core/kernels.py'),
                                        'tinytorch.core.kernels.KernelOptimizationProfiler.analyze_tensor_core_utilization': ( 'temp_holding/13_kernels/kernels_dev.html#kerneloptimizationprofiler.analyze_tensor_core_utilization',
                                                                                                                               'tinytorch/core/kernels.py'),
                                        'tinytorch.core.kernels.KernelOptimizationProfiler.analyze_warp_divergence': ( 'temp_holding/13_kernels/kernels_dev.html#kerneloptimizationprofiler.analyze_warp_divergence',
                                                                                                                       'tinytorch/core/kernels.py'),
                                        'tinytorch.core.kernels.KernelOptimizationProfiler.generate_optimization_report': ( 'temp_holding/13_kernels/kernels_dev.html#kerneloptimizationprofiler.generate_optimization_report',
                                                                                                                            'tinytorch/core/kernels.py'),
                                        'tinytorch.core.kernels.cache_friendly_matmul': ( 'temp_holding/13_kernels/kernels_dev.html#cache_friendly_matmul',
                                                                                          'tinytorch/core/kernels.py'),
                                        'tinytorch.core.kernels.matmul_baseline': ( 'temp_holding/13_kernels/kernels_dev.html#matmul_baseline',
                                                                                    'tinytorch/core/kernels.py'),
                                        'tinytorch.core.kernels.parallel_batch_processing': ( 'temp_holding/13_kernels/kernels_dev.html#parallel_batch_processing',
                                                                                              'tinytorch/core/kernels.py'),
                                        'tinytorch.core.kernels.parallel_relu': ( 'temp_holding/13_kernels/kernels_dev.html#parallel_relu',
                                                                                  'tinytorch/core/kernels.py'),
                                        'tinytorch.core.kernels.quantized_matmul': ( 'temp_holding/13_kernels/kernels_dev.html#quantized_matmul',
                                                                                     'tinytorch/core/kernels.py'),
                                        'tinytorch.core.kernels.quantized_relu': ( 'temp_holding/13_kernels/kernels_dev.html#quantized_relu',
                                                                                   'tinytorch/core/kernels.py'),
                                        'tinytorch.core.kernels.time_kernel': ( 'temp_holding/13_kernels/kernels_dev.html#time_kernel',
                                                                                'tinytorch/core/kernels.py'),
                                        'tinytorch.core.kernels.vectorized_operations': ( 'temp_holding/13_kernels/kernels_dev.html#vectorized_operations',
                                                                                          'tinytorch/core/kernels.py'),
                                        'tinytorch.core.kernels.vectorized_relu': ( 'temp_holding/13_kernels/kernels_dev.html#vectorized_relu',
                                                                                    'tinytorch/core/kernels.py')},
            'tinytorch.core.layers': { 'tinytorch.core.layers.Linear': ('04_layers/layers_dev.html#linear', 'tinytorch/core/layers.py'),
                                       'tinytorch.core.layers.Linear.__init__': ( '04_layers/layers_dev.html#linear.__init__',
                                                                                  'tinytorch/core/layers.py'),
                                       'tinytorch.core.layers.Linear.forward': ( '04_layers/layers_dev.html#linear.forward',
                                                                                 'tinytorch/core/layers.py'),
                                       'tinytorch.core.layers.Module': ('04_layers/layers_dev.html#module', 'tinytorch/core/layers.py'),
                                       'tinytorch.core.layers.Module.__call__': ( '04_layers/layers_dev.html#module.__call__',
                                                                                  'tinytorch/core/layers.py'),
                                       'tinytorch.core.layers.Module.__init__': ( '04_layers/layers_dev.html#module.__init__',
                                                                                  'tinytorch/core/layers.py'),
                                       'tinytorch.core.layers.Module.__setattr__': ( '04_layers/layers_dev.html#module.__setattr__',
                                                                                     'tinytorch/core/layers.py'),
                                       'tinytorch.core.layers.Module.forward': ( '04_layers/layers_dev.html#module.forward',
                                                                                 'tinytorch/core/layers.py'),
                                       'tinytorch.core.layers.Module.parameters': ( '04_layers/layers_dev.html#module.parameters',
                                                                                    'tinytorch/core/layers.py'),
                                       'tinytorch.core.layers.matmul': ('04_layers/layers_dev.html#matmul', 'tinytorch/core/layers.py')},
            'tinytorch.core.mlops': { 'tinytorch.core.mlops.DeploymentStrategy': ( 'temp_holding/15_mlops/mlops_dev.html#deploymentstrategy',
                                                                                   'tinytorch/core/mlops.py'),
                                      'tinytorch.core.mlops.DriftDetector': ( 'temp_holding/15_mlops/mlops_dev.html#driftdetector',
                                                                              'tinytorch/core/mlops.py'),
                                      'tinytorch.core.mlops.DriftDetector.__init__': ( 'temp_holding/15_mlops/mlops_dev.html#driftdetector.__init__',
                                                                                       'tinytorch/core/mlops.py'),
                                      'tinytorch.core.mlops.DriftDetector.detect_drift': ( 'temp_holding/15_mlops/mlops_dev.html#driftdetector.detect_drift',
                                                                                           'tinytorch/core/mlops.py'),
                                      'tinytorch.core.mlops.DriftDetector.get_drift_history': ( 'temp_holding/15_mlops/mlops_dev.html#driftdetector.get_drift_history',
                                                                                                'tinytorch/core/mlops.py'),
                                      'tinytorch.core.mlops.MLOpsPipeline': ( 'temp_holding/15_mlops/mlops_dev.html#mlopspipeline',
                                                                              'tinytorch/core/mlops.py'),
                                      'tinytorch.core.mlops.MLOpsPipeline.__init__': ( 'temp_holding/15_mlops/mlops_dev.html#mlopspipeline.__init__',
                                                                                       'tinytorch/core/mlops.py'),
                                      'tinytorch.core.mlops.MLOpsPipeline.check_system_health': ( 'temp_holding/15_mlops/mlops_dev.html#mlopspipeline.check_system_health',
                                                                                                  'tinytorch/core/mlops.py'),
                                      'tinytorch.core.mlops.MLOpsPipeline.get_pipeline_status': ( 'temp_holding/15_mlops/mlops_dev.html#mlopspipeline.get_pipeline_status',
                                                                                                  'tinytorch/core/mlops.py'),
                                      'tinytorch.core.mlops.MLOpsPipeline.start_monitoring': ( 'temp_holding/15_mlops/mlops_dev.html#mlopspipeline.start_monitoring',
                                                                                               'tinytorch/core/mlops.py'),
                                      'tinytorch.core.mlops.ModelMonitor': ( 'temp_holding/15_mlops/mlops_dev.html#modelmonitor',
                                                                             'tinytorch/core/mlops.py'),
                                      'tinytorch.core.mlops.ModelMonitor.__init__': ( 'temp_holding/15_mlops/mlops_dev.html#modelmonitor.__init__',
                                                                                      'tinytorch/core/mlops.py'),
                                      'tinytorch.core.mlops.ModelMonitor.check_alerts': ( 'temp_holding/15_mlops/mlops_dev.html#modelmonitor.check_alerts',
                                                                                          'tinytorch/core/mlops.py'),
                                      'tinytorch.core.mlops.ModelMonitor.get_performance_trend': ( 'temp_holding/15_mlops/mlops_dev.html#modelmonitor.get_performance_trend',
                                                                                                   'tinytorch/core/mlops.py'),
                                      'tinytorch.core.mlops.ModelMonitor.record_performance': ( 'temp_holding/15_mlops/mlops_dev.html#modelmonitor.record_performance',
                                                                                                'tinytorch/core/mlops.py'),
                                      'tinytorch.core.mlops.ModelVersion': ( 'temp_holding/15_mlops/mlops_dev.html#modelversion',
                                                                             'tinytorch/core/mlops.py'),
                                      'tinytorch.core.mlops.ProductionMLOpsProfiler': ( 'temp_holding/15_mlops/mlops_dev.html#productionmlopsprofiler',
                                                                                        'tinytorch/core/mlops.py'),
                                      'tinytorch.core.mlops.ProductionMLOpsProfiler.__init__': ( 'temp_holding/15_mlops/mlops_dev.html#productionmlopsprofiler.__init__',
                                                                                                 'tinytorch/core/mlops.py'),
                                      'tinytorch.core.mlops.ProductionMLOpsProfiler.create_continuous_training_pipeline': ( 'temp_holding/15_mlops/mlops_dev.html#productionmlopsprofiler.create_continuous_training_pipeline',
                                                                                                                            'tinytorch/core/mlops.py'),
                                      'tinytorch.core.mlops.ProductionMLOpsProfiler.detect_advanced_feature_drift': ( 'temp_holding/15_mlops/mlops_dev.html#productionmlopsprofiler.detect_advanced_feature_drift',
                                                                                                                      'tinytorch/core/mlops.py'),
                                      'tinytorch.core.mlops.ProductionMLOpsProfiler.generate_mlops_governance_report': ( 'temp_holding/15_mlops/mlops_dev.html#productionmlopsprofiler.generate_mlops_governance_report',
                                                                                                                         'tinytorch/core/mlops.py'),
                                      'tinytorch.core.mlops.ProductionMLOpsProfiler.handle_production_incident': ( 'temp_holding/15_mlops/mlops_dev.html#productionmlopsprofiler.handle_production_incident',
                                                                                                                   'tinytorch/core/mlops.py'),
                                      'tinytorch.core.mlops.ProductionMLOpsProfiler.orchestrate_deployment': ( 'temp_holding/15_mlops/mlops_dev.html#productionmlopsprofiler.orchestrate_deployment',
                                                                                                               'tinytorch/core/mlops.py'),
                                      'tinytorch.core.mlops.ProductionMLOpsProfiler.register_model_version': ( 'temp_holding/15_mlops/mlops_dev.html#productionmlopsprofiler.register_model_version',
                                                                                                               'tinytorch/core/mlops.py'),
                                      'tinytorch.core.mlops.RetrainingTrigger': ( 'temp_holding/15_mlops/mlops_dev.html#retrainingtrigger',
                                                                                  'tinytorch/core/mlops.py'),
                                      'tinytorch.core.mlops.RetrainingTrigger.__init__': ( 'temp_holding/15_mlops/mlops_dev.html#retrainingtrigger.__init__',
                                                                                           'tinytorch/core/mlops.py'),
                                      'tinytorch.core.mlops.RetrainingTrigger.check_trigger_conditions': ( 'temp_holding/15_mlops/mlops_dev.html#retrainingtrigger.check_trigger_conditions',
                                                                                                           'tinytorch/core/mlops.py'),
                                      'tinytorch.core.mlops.RetrainingTrigger.execute_retraining': ( 'temp_holding/15_mlops/mlops_dev.html#retrainingtrigger.execute_retraining',
                                                                                                     'tinytorch/core/mlops.py'),
                                      'tinytorch.core.mlops.RetrainingTrigger.get_retraining_history': ( 'temp_holding/15_mlops/mlops_dev.html#retrainingtrigger.get_retraining_history',
                                                                                                         'tinytorch/core/mlops.py')},
            'tinytorch.core.networks': { 'tinytorch.core.networks.MLP': ('05_dense/dense_dev.html#mlp', 'tinytorch/core/networks.py'),
                                         'tinytorch.core.networks.MLP.__call__': ( '05_dense/dense_dev.html#mlp.__call__',
                                                                                   'tinytorch/core/networks.py'),
                                         'tinytorch.core.networks.MLP.__init__': ( '05_dense/dense_dev.html#mlp.__init__',
                                                                                   'tinytorch/core/networks.py'),
                                         'tinytorch.core.networks.MLP.forward': ( '05_dense/dense_dev.html#mlp.forward',
                                                                                  'tinytorch/core/networks.py'),
                                         'tinytorch.core.networks.Sequential': ( '05_dense/dense_dev.html#sequential',
                                                                                 'tinytorch/core/networks.py'),
                                         'tinytorch.core.networks.Sequential.__call__': ( '05_dense/dense_dev.html#sequential.__call__',
                                                                                          'tinytorch/core/networks.py'),
                                         'tinytorch.core.networks.Sequential.__init__': ( '05_dense/dense_dev.html#sequential.__init__',
                                                                                          'tinytorch/core/networks.py'),
                                         'tinytorch.core.networks.Sequential.add': ( '05_dense/dense_dev.html#sequential.add',
                                                                                     'tinytorch/core/networks.py'),
                                         'tinytorch.core.networks.Sequential.forward': ( '05_dense/dense_dev.html#sequential.forward',
                                                                                         'tinytorch/core/networks.py'),
                                         'tinytorch.core.networks._should_show_plots': ( '05_dense/dense_dev.html#_should_show_plots',
                                                                                         'tinytorch/core/networks.py'),
                                         'tinytorch.core.networks.create_mlp': ( '05_dense/dense_dev.html#create_mlp',
                                                                                 'tinytorch/core/networks.py')},
            'tinytorch.core.setup': { 'tinytorch.core.setup.personal_info': ( '01_setup/setup_dev.html#personal_info',
                                                                              'tinytorch/core/setup.py'),
                                      'tinytorch.core.setup.system_info': ( '01_setup/setup_dev.html#system_info',
                                                                            'tinytorch/core/setup.py')},
            'tinytorch.core.spatial': { 'tinytorch.core.spatial.AvgPool2d': ( '09_spatial/spatial_dev.html#avgpool2d',
                                                                              'tinytorch/core/spatial.py'),
                                        'tinytorch.core.spatial.AvgPool2d.__call__': ( '09_spatial/spatial_dev.html#avgpool2d.__call__',
                                                                                       'tinytorch/core/spatial.py'),
                                        'tinytorch.core.spatial.AvgPool2d.__init__': ( '09_spatial/spatial_dev.html#avgpool2d.__init__',
                                                                                       'tinytorch/core/spatial.py'),
                                        'tinytorch.core.spatial.AvgPool2d.forward': ( '09_spatial/spatial_dev.html#avgpool2d.forward',
                                                                                      'tinytorch/core/spatial.py'),
                                        'tinytorch.core.spatial.AvgPool2d.parameters': ( '09_spatial/spatial_dev.html#avgpool2d.parameters',
                                                                                         'tinytorch/core/spatial.py'),
                                        'tinytorch.core.spatial.Conv2d': ( '09_spatial/spatial_dev.html#conv2d',
                                                                           'tinytorch/core/spatial.py'),
                                        'tinytorch.core.spatial.Conv2d.__call__': ( '09_spatial/spatial_dev.html#conv2d.__call__',
                                                                                    'tinytorch/core/spatial.py'),
                                        'tinytorch.core.spatial.Conv2d.__init__': ( '09_spatial/spatial_dev.html#conv2d.__init__',
                                                                                    'tinytorch/core/spatial.py'),
                                        'tinytorch.core.spatial.Conv2d.forward': ( '09_spatial/spatial_dev.html#conv2d.forward',
                                                                                   'tinytorch/core/spatial.py'),
                                        'tinytorch.core.spatial.Conv2d.parameters': ( '09_spatial/spatial_dev.html#conv2d.parameters',
                                                                                      'tinytorch/core/spatial.py'),
                                        'tinytorch.core.spatial.MaxPool2d': ( '09_spatial/spatial_dev.html#maxpool2d',
                                                                              'tinytorch/core/spatial.py'),
                                        'tinytorch.core.spatial.MaxPool2d.__call__': ( '09_spatial/spatial_dev.html#maxpool2d.__call__',
                                                                                       'tinytorch/core/spatial.py'),
                                        'tinytorch.core.spatial.MaxPool2d.__init__': ( '09_spatial/spatial_dev.html#maxpool2d.__init__',
                                                                                       'tinytorch/core/spatial.py'),
                                        'tinytorch.core.spatial.MaxPool2d.forward': ( '09_spatial/spatial_dev.html#maxpool2d.forward',
                                                                                      'tinytorch/core/spatial.py'),
                                        'tinytorch.core.spatial.MaxPool2d.parameters': ( '09_spatial/spatial_dev.html#maxpool2d.parameters',
                                                                                         'tinytorch/core/spatial.py'),
                                        'tinytorch.core.spatial.SimpleCNN': ( '09_spatial/spatial_dev.html#simplecnn',
                                                                              'tinytorch/core/spatial.py'),
                                        'tinytorch.core.spatial.SimpleCNN.__call__': ( '09_spatial/spatial_dev.html#simplecnn.__call__',
                                                                                       'tinytorch/core/spatial.py'),
                                        'tinytorch.core.spatial.SimpleCNN.__init__': ( '09_spatial/spatial_dev.html#simplecnn.__init__',
                                                                                       'tinytorch/core/spatial.py'),
                                        'tinytorch.core.spatial.SimpleCNN.forward': ( '09_spatial/spatial_dev.html#simplecnn.forward',
                                                                                      'tinytorch/core/spatial.py'),
                                        'tinytorch.core.spatial.SimpleCNN.parameters': ( '09_spatial/spatial_dev.html#simplecnn.parameters',
                                                                                         'tinytorch/core/spatial.py'),
                                        'tinytorch.core.spatial.SimpleCNN.relu': ( '09_spatial/spatial_dev.html#simplecnn.relu',
                                                                                   'tinytorch/core/spatial.py')},
            'tinytorch.core.training': { 'tinytorch.core.training.Accuracy': ( '10_training/training_dev.html#accuracy',
                                                                               'tinytorch/core/training.py'),
                                         'tinytorch.core.training.Accuracy.__call__': ( '10_training/training_dev.html#accuracy.__call__',
                                                                                        'tinytorch/core/training.py'),
                                         'tinytorch.core.training.Accuracy.__init__': ( '10_training/training_dev.html#accuracy.__init__',
                                                                                        'tinytorch/core/training.py'),
                                         'tinytorch.core.training.Accuracy.forward': ( '10_training/training_dev.html#accuracy.forward',
                                                                                       'tinytorch/core/training.py'),
                                         'tinytorch.core.training.BinaryCrossEntropyLoss': ( '10_training/training_dev.html#binarycrossentropyloss',
                                                                                             'tinytorch/core/training.py'),
                                         'tinytorch.core.training.BinaryCrossEntropyLoss.__call__': ( '10_training/training_dev.html#binarycrossentropyloss.__call__',
                                                                                                      'tinytorch/core/training.py'),
                                         'tinytorch.core.training.BinaryCrossEntropyLoss.__init__': ( '10_training/training_dev.html#binarycrossentropyloss.__init__',
                                                                                                      'tinytorch/core/training.py'),
                                         'tinytorch.core.training.BinaryCrossEntropyLoss.forward': ( '10_training/training_dev.html#binarycrossentropyloss.forward',
                                                                                                     'tinytorch/core/training.py'),
                                         'tinytorch.core.training.CrossEntropyLoss': ( '10_training/training_dev.html#crossentropyloss',
                                                                                       'tinytorch/core/training.py'),
                                         'tinytorch.core.training.CrossEntropyLoss.__call__': ( '10_training/training_dev.html#crossentropyloss.__call__',
                                                                                                'tinytorch/core/training.py'),
                                         'tinytorch.core.training.CrossEntropyLoss.__init__': ( '10_training/training_dev.html#crossentropyloss.__init__',
                                                                                                'tinytorch/core/training.py'),
                                         'tinytorch.core.training.CrossEntropyLoss.forward': ( '10_training/training_dev.html#crossentropyloss.forward',
                                                                                               'tinytorch/core/training.py'),
                                         'tinytorch.core.training.MeanSquaredError': ( '10_training/training_dev.html#meansquarederror',
                                                                                       'tinytorch/core/training.py'),
                                         'tinytorch.core.training.MeanSquaredError.__call__': ( '10_training/training_dev.html#meansquarederror.__call__',
                                                                                                'tinytorch/core/training.py'),
                                         'tinytorch.core.training.MeanSquaredError.__init__': ( '10_training/training_dev.html#meansquarederror.__init__',
                                                                                                'tinytorch/core/training.py'),
                                         'tinytorch.core.training.MeanSquaredError.forward': ( '10_training/training_dev.html#meansquarederror.forward',
                                                                                               'tinytorch/core/training.py'),
                                         'tinytorch.core.training.ProductionTrainingOptimizer': ( '10_training/training_dev.html#productiontrainingoptimizer',
                                                                                                  'tinytorch/core/training.py'),
                                         'tinytorch.core.training.ProductionTrainingOptimizer.__init__': ( '10_training/training_dev.html#productiontrainingoptimizer.__init__',
                                                                                                           'tinytorch/core/training.py'),
                                         'tinytorch.core.training.ProductionTrainingOptimizer._generate_batch_size_analysis': ( '10_training/training_dev.html#productiontrainingoptimizer._generate_batch_size_analysis',
                                                                                                                                'tinytorch/core/training.py'),
                                         'tinytorch.core.training.ProductionTrainingOptimizer.optimize_batch_size_for_throughput': ( '10_training/training_dev.html#productiontrainingoptimizer.optimize_batch_size_for_throughput',
                                                                                                                                     'tinytorch/core/training.py'),
                                         'tinytorch.core.training.Trainer': ( '10_training/training_dev.html#trainer',
                                                                              'tinytorch/core/training.py'),
                                         'tinytorch.core.training.Trainer.__init__': ( '10_training/training_dev.html#trainer.__init__',
                                                                                       'tinytorch/core/training.py'),
                                         'tinytorch.core.training.Trainer._get_model_state': ( '10_training/training_dev.html#trainer._get_model_state',
                                                                                               'tinytorch/core/training.py'),
                                         'tinytorch.core.training.Trainer._set_model_state': ( '10_training/training_dev.html#trainer._set_model_state',
                                                                                               'tinytorch/core/training.py'),
                                         'tinytorch.core.training.Trainer.fit': ( '10_training/training_dev.html#trainer.fit',
                                                                                  'tinytorch/core/training.py'),
                                         'tinytorch.core.training.Trainer.load_checkpoint': ( '10_training/training_dev.html#trainer.load_checkpoint',
                                                                                              'tinytorch/core/training.py'),
                                         'tinytorch.core.training.Trainer.save_checkpoint': ( '10_training/training_dev.html#trainer.save_checkpoint',
                                                                                              'tinytorch/core/training.py'),
                                         'tinytorch.core.training.Trainer.train_epoch': ( '10_training/training_dev.html#trainer.train_epoch',
                                                                                          'tinytorch/core/training.py'),
                                         'tinytorch.core.training.Trainer.validate_epoch': ( '10_training/training_dev.html#trainer.validate_epoch',
                                                                                             'tinytorch/core/training.py'),
                                         'tinytorch.core.training.TrainingPipelineProfiler': ( '10_training/training_dev.html#trainingpipelineprofiler',
                                                                                               'tinytorch/core/training.py'),
                                         'tinytorch.core.training.TrainingPipelineProfiler.__init__': ( '10_training/training_dev.html#trainingpipelineprofiler.__init__',
                                                                                                        'tinytorch/core/training.py'),
                                         'tinytorch.core.training.TrainingPipelineProfiler._analyze_pipeline_performance': ( '10_training/training_dev.html#trainingpipelineprofiler._analyze_pipeline_performance',
                                                                                                                             'tinytorch/core/training.py'),
                                         'tinytorch.core.training.TrainingPipelineProfiler._estimate_memory_usage': ( '10_training/training_dev.html#trainingpipelineprofiler._estimate_memory_usage',
                                                                                                                      'tinytorch/core/training.py'),
                                         'tinytorch.core.training.TrainingPipelineProfiler.profile_complete_training_step': ( '10_training/training_dev.html#trainingpipelineprofiler.profile_complete_training_step',
                                                                                                                              'tinytorch/core/training.py')},
            'tinytorch.nn.functional': {},
            'tinytorch.nn.modules': {},
            'tinytorch.nn.utils.prune': {},
            'tinytorch.tinygpt': { 'tinytorch.tinygpt.CharTokenizer': ( 'temp_holding/16_tinygpt/tinygpt_dev.html#chartokenizer',
                                                                        'tinytorch/tinygpt.py'),
                                   'tinytorch.tinygpt.CharTokenizer.__init__': ( 'temp_holding/16_tinygpt/tinygpt_dev.html#chartokenizer.__init__',
                                                                                 'tinytorch/tinygpt.py'),
                                   'tinytorch.tinygpt.CharTokenizer.decode': ( 'temp_holding/16_tinygpt/tinygpt_dev.html#chartokenizer.decode',
                                                                               'tinytorch/tinygpt.py'),
                                   'tinytorch.tinygpt.CharTokenizer.encode': ( 'temp_holding/16_tinygpt/tinygpt_dev.html#chartokenizer.encode',
                                                                               'tinytorch/tinygpt.py'),
                                   'tinytorch.tinygpt.CharTokenizer.encode_batch': ( 'temp_holding/16_tinygpt/tinygpt_dev.html#chartokenizer.encode_batch',
                                                                                     'tinytorch/tinygpt.py'),
                                   'tinytorch.tinygpt.CharTokenizer.fit': ( 'temp_holding/16_tinygpt/tinygpt_dev.html#chartokenizer.fit',
                                                                            'tinytorch/tinygpt.py'),
                                   'tinytorch.tinygpt.CharTokenizer.get_vocab_size': ( 'temp_holding/16_tinygpt/tinygpt_dev.html#chartokenizer.get_vocab_size',
                                                                                       'tinytorch/tinygpt.py'),
                                   'tinytorch.tinygpt.CrossEntropyLoss': ( 'temp_holding/16_tinygpt/tinygpt_dev.html#crossentropyloss',
                                                                           'tinytorch/tinygpt.py'),
                                   'tinytorch.tinygpt.CrossEntropyLoss.forward': ( 'temp_holding/16_tinygpt/tinygpt_dev.html#crossentropyloss.forward',
                                                                                   'tinytorch/tinygpt.py'),
                                   'tinytorch.tinygpt.LanguageModelAccuracy': ( 'temp_holding/16_tinygpt/tinygpt_dev.html#languagemodelaccuracy',
                                                                                'tinytorch/tinygpt.py'),
                                   'tinytorch.tinygpt.LanguageModelAccuracy.forward': ( 'temp_holding/16_tinygpt/tinygpt_dev.html#languagemodelaccuracy.forward',
                                                                                        'tinytorch/tinygpt.py'),
                                   'tinytorch.tinygpt.LanguageModelLoss': ( 'temp_holding/16_tinygpt/tinygpt_dev.html#languagemodelloss',
                                                                            'tinytorch/tinygpt.py'),
                                   'tinytorch.tinygpt.LanguageModelLoss.__init__': ( 'temp_holding/16_tinygpt/tinygpt_dev.html#languagemodelloss.__init__',
                                                                                     'tinytorch/tinygpt.py'),
                                   'tinytorch.tinygpt.LanguageModelLoss.forward': ( 'temp_holding/16_tinygpt/tinygpt_dev.html#languagemodelloss.forward',
                                                                                    'tinytorch/tinygpt.py'),
                                   'tinytorch.tinygpt.LanguageModelTrainer': ( 'temp_holding/16_tinygpt/tinygpt_dev.html#languagemodeltrainer',
                                                                               'tinytorch/tinygpt.py'),
                                   'tinytorch.tinygpt.LanguageModelTrainer.__init__': ( 'temp_holding/16_tinygpt/tinygpt_dev.html#languagemodeltrainer.__init__',
                                                                                        'tinytorch/tinygpt.py'),
                                   'tinytorch.tinygpt.LanguageModelTrainer.create_training_data': ( 'temp_holding/16_tinygpt/tinygpt_dev.html#languagemodeltrainer.create_training_data',
                                                                                                    'tinytorch/tinygpt.py'),
                                   'tinytorch.tinygpt.LanguageModelTrainer.fit': ( 'temp_holding/16_tinygpt/tinygpt_dev.html#languagemodeltrainer.fit',
                                                                                   'tinytorch/tinygpt.py'),
                                   'tinytorch.tinygpt.LanguageModelTrainer.generate_text': ( 'temp_holding/16_tinygpt/tinygpt_dev.html#languagemodeltrainer.generate_text',
                                                                                             'tinytorch/tinygpt.py'),
                                   'tinytorch.tinygpt.LayerNorm': ( 'temp_holding/16_tinygpt/tinygpt_dev.html#layernorm',
                                                                    'tinytorch/tinygpt.py'),
                                   'tinytorch.tinygpt.LayerNorm.__init__': ( 'temp_holding/16_tinygpt/tinygpt_dev.html#layernorm.__init__',
                                                                             'tinytorch/tinygpt.py'),
                                   'tinytorch.tinygpt.LayerNorm.forward': ( 'temp_holding/16_tinygpt/tinygpt_dev.html#layernorm.forward',
                                                                            'tinytorch/tinygpt.py'),
                                   'tinytorch.tinygpt.MultiHeadAttention': ( 'temp_holding/16_tinygpt/tinygpt_dev.html#multiheadattention',
                                                                             'tinytorch/tinygpt.py'),
                                   'tinytorch.tinygpt.MultiHeadAttention.__init__': ( 'temp_holding/16_tinygpt/tinygpt_dev.html#multiheadattention.__init__',
                                                                                      'tinytorch/tinygpt.py'),
                                   'tinytorch.tinygpt.MultiHeadAttention._combine_heads': ( 'temp_holding/16_tinygpt/tinygpt_dev.html#multiheadattention._combine_heads',
                                                                                            'tinytorch/tinygpt.py'),
                                   'tinytorch.tinygpt.MultiHeadAttention._reshape_for_attention': ( 'temp_holding/16_tinygpt/tinygpt_dev.html#multiheadattention._reshape_for_attention',
                                                                                                    'tinytorch/tinygpt.py'),
                                   'tinytorch.tinygpt.MultiHeadAttention._scaled_dot_product_attention': ( 'temp_holding/16_tinygpt/tinygpt_dev.html#multiheadattention._scaled_dot_product_attention',
                                                                                                           'tinytorch/tinygpt.py'),
                                   'tinytorch.tinygpt.MultiHeadAttention.forward': ( 'temp_holding/16_tinygpt/tinygpt_dev.html#multiheadattention.forward',
                                                                                     'tinytorch/tinygpt.py'),
                                   'tinytorch.tinygpt.PositionalEncoding': ( 'temp_holding/16_tinygpt/tinygpt_dev.html#positionalencoding',
                                                                             'tinytorch/tinygpt.py'),
                                   'tinytorch.tinygpt.PositionalEncoding.__init__': ( 'temp_holding/16_tinygpt/tinygpt_dev.html#positionalencoding.__init__',
                                                                                      'tinytorch/tinygpt.py'),
                                   'tinytorch.tinygpt.PositionalEncoding.forward': ( 'temp_holding/16_tinygpt/tinygpt_dev.html#positionalencoding.forward',
                                                                                     'tinytorch/tinygpt.py'),
                                   'tinytorch.tinygpt.TinyGPT': ( 'temp_holding/16_tinygpt/tinygpt_dev.html#tinygpt',
                                                                  'tinytorch/tinygpt.py'),
                                   'tinytorch.tinygpt.TinyGPT.__init__': ( 'temp_holding/16_tinygpt/tinygpt_dev.html#tinygpt.__init__',
                                                                           'tinytorch/tinygpt.py'),
                                   'tinytorch.tinygpt.TinyGPT.count_parameters': ( 'temp_holding/16_tinygpt/tinygpt_dev.html#tinygpt.count_parameters',
                                                                                   'tinytorch/tinygpt.py'),
                                   'tinytorch.tinygpt.TinyGPT.forward': ( 'temp_holding/16_tinygpt/tinygpt_dev.html#tinygpt.forward',
                                                                          'tinytorch/tinygpt.py'),
                                   'tinytorch.tinygpt.TinyGPT.generate': ( 'temp_holding/16_tinygpt/tinygpt_dev.html#tinygpt.generate',
                                                                           'tinytorch/tinygpt.py'),
                                   'tinytorch.tinygpt.Trainer': ( 'temp_holding/16_tinygpt/tinygpt_dev.html#trainer',
                                                                  'tinytorch/tinygpt.py'),
                                   'tinytorch.tinygpt.Trainer.__init__': ( 'temp_holding/16_tinygpt/tinygpt_dev.html#trainer.__init__',
                                                                           'tinytorch/tinygpt.py'),
                                   'tinytorch.tinygpt.TransformerBlock': ( 'temp_holding/16_tinygpt/tinygpt_dev.html#transformerblock',
                                                                           'tinytorch/tinygpt.py'),
                                   'tinytorch.tinygpt.TransformerBlock.__init__': ( 'temp_holding/16_tinygpt/tinygpt_dev.html#transformerblock.__init__',
                                                                                    'tinytorch/tinygpt.py'),
                                   'tinytorch.tinygpt.TransformerBlock.forward': ( 'temp_holding/16_tinygpt/tinygpt_dev.html#transformerblock.forward',
                                                                                   'tinytorch/tinygpt.py'),
                                   'tinytorch.tinygpt.create_causal_mask': ( 'temp_holding/16_tinygpt/tinygpt_dev.html#create_causal_mask',
                                                                             'tinytorch/tinygpt.py'),
                                   'tinytorch.tinygpt.live_demo': ( 'temp_holding/16_tinygpt/tinygpt_dev.html#live_demo',
                                                                    'tinytorch/tinygpt.py'),
                                   'tinytorch.tinygpt.no_grad': ( 'temp_holding/16_tinygpt/tinygpt_dev.html#no_grad',
                                                                  'tinytorch/tinygpt.py'),
                                   'tinytorch.tinygpt.shakespeare_demo': ( 'temp_holding/16_tinygpt/tinygpt_dev.html#shakespeare_demo',
                                                                           'tinytorch/tinygpt.py')}}}
