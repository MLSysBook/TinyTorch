# AUTOGENERATED! DO NOT EDIT! File to edit: ../../assignments/source/00_setup/setup_dev.ipynb.

# %% auto 0
__all__ = ['hello_tinytorch', 'add_numbers', 'SystemInfo', 'DeveloperProfile']

# %% ../../assignments/source/00_setup/setup_dev.ipynb 3
def hello_tinytorch():
    """
    A simple hello world function for TinyTorch.
    
    TODO: Implement this function to display TinyTorch ASCII art and welcome message.
    Load the flame art from tinytorch_flame.txt file with graceful fallback.
    
    HINTS:
    1. Try to load ASCII art from 'tinytorch_flame.txt' in current directory
    2. If file exists, read and print the content
    3. Add "TinyðŸ”¥Torch" and "Build ML Systems from Scratch!" messages
    4. If file doesn't exist, just print the emoji version
    5. Handle any exceptions gracefully
    
    EXAMPLE OUTPUT:
    [ASCII art from file]
    TinyðŸ”¥Torch
    Build ML Systems from Scratch!
    """
    # YOUR CODE HERE
    raise NotImplementedError()

# %% ../../assignments/source/00_setup/setup_dev.ipynb 4
def add_numbers(a, b):
    """
    Add two numbers together.
    
    TODO: Implement addition of two numbers.
    This is the foundation of all mathematical operations in ML.
    
    Args:
        a: First number (int or float)
        b: Second number (int or float)
        
    Returns:
        Sum of a and b
        
    EXAMPLE:
    add_numbers(2, 3) should return 5
    add_numbers(1.5, 2.5) should return 4.0
    """
    # YOUR CODE HERE
    raise NotImplementedError()

# %% ../../assignments/source/00_setup/setup_dev.ipynb 9
class SystemInfo:
    """
    Simple system information class.
    
    TODO: Implement this class to collect and display system information.
    
    REQUIREMENTS:
    1. __init__: Collect Python version, platform, and machine information
    2. __str__: Return formatted system info string
    3. is_compatible: Check if Python version >= 3.8
    
    HINTS:
    - Use sys.version_info for Python version
    - Use platform.system() for platform name  
    - Use platform.machine() for machine architecture
    - Store these as instance attributes in __init__
    """
    
    def __init__(self):
        """
        Initialize system information collection.
        
        TODO: Collect Python version, platform, and machine information.
        Store as instance attributes: self.python_version, self.platform, self.machine
        """
        # YOUR CODE HERE
        raise NotImplementedError()
    
    def __str__(self):
        """
        Return human-readable system information.
        
        TODO: Format system info as a readable string.
        FORMAT: "Python X.Y on Platform (Architecture)"
        EXAMPLE: "Python 3.9 on Darwin (arm64)"
        """
        # YOUR CODE HERE
        raise NotImplementedError()
    
    def is_compatible(self):
        """
        Check if system meets minimum requirements.
        
        TODO: Check if Python version >= 3.8
        Return True if compatible, False otherwise
        """
        # YOUR CODE HERE
        raise NotImplementedError()

# %% ../../assignments/source/00_setup/setup_dev.ipynb 15
class DeveloperProfile:
    """
    Developer profile for personalizing TinyTorch experience.
    
    TODO: OPTIONAL CHALLENGE - Implement this class for extra credit!
    
    REQUIREMENTS:
    1. Store developer information (name, email, etc.)
    2. Load ASCII art from file with fallback
    3. Generate formatted profile display
    4. Create professional signature
    
    This is an advanced exercise - only attempt after completing the required parts!
    """
    
    def __init__(self, name="Student", email="student@example.com"):
        """
        Initialize developer profile.
        
        TODO: Store developer information with defaults.
        Feel free to customize with your own info!
        """
        # YOUR CODE HERE (OPTIONAL)
        self.name = name
        self.email = email
    
    def get_signature(self):
        """
        Get a short signature for code headers.
        
        TODO: Return a signature like "Built by Name (email)"
        """
        # YOUR CODE HERE (OPTIONAL)
        return f"Built by {self.name} ({self.email})"
