
# TinyTorch Project Structure Guide

This is an educational ML Systems course repository organized into progressive modules that build a complete ML framework from scratch.

## Core Architecture

**ðŸŽ“ Teaching vs. ðŸ”§ Building**: The project has two parallel structures:
- **Learning side**: `modules/` - Educational content organized by concepts
- **Building side**: `tinytorch/` - Production package organized by function

## Key Directories

### Learning Side (`modules/`)
- [modules/setup/](mdc:modules/setup/) - Development workflow and environment setup
- [modules/tensor/](mdc:modules/tensor/) - Core tensor data structure (Module 1)
- [modules/autograd/](mdc:modules/autograd/) - Automatic differentiation
- [modules/mlp/](mdc:modules/mlp/) - Multi-layer perceptrons
- [modules/cnn/](mdc:modules/cnn/) - Convolutional neural networks
- [modules/training/](mdc:modules/training/) - Training loops and optimization
- [modules/mlops/](mdc:modules/mlops/) - Production ML operations

### Building Side (`tinytorch/`)
- [tinytorch/core/](mdc:tinytorch/core/) - Core framework components (tensor, autograd, etc.)
- [tinytorch/datasets/](mdc:tinytorch/datasets/) - Data loading utilities
- [tinytorch/configs/](mdc:tinytorch/configs/) - Configuration management

## Core Infrastructure

- [bin/tito](mdc:bin/tito) - Main CLI tool for sync, test, and build operations
- [bin/activate-tinytorch.sh](mdc:bin/activate-tinytorch.sh) - Virtual environment activation script
- [tito/](mdc:tito/) - CLI implementation with modular command structure
- [Makefile](mdc:Makefile) - Build automation and development shortcuts

## Module Structure Pattern

Each module follows the NBDev educational pattern:
```
modules/{module_name}/
â”œâ”€â”€ {module_name}_dev.py     # Main Python source (Jupytext format)
â”œâ”€â”€ {module_name}_dev.ipynb  # Generated notebook (auto-created)
â”œâ”€â”€ README.md               # Documentation
â””â”€â”€ tests/                  # Test directory
    â””â”€â”€ test_{module_name}.py # Module tests
```

## Development Workflow

1. **Activate environment**: `source bin/activate-tinytorch.sh`
2. **Sync**: Run `tito module export --module {module}`
3. **Test**: Run `tito module test --module {module}`

The `#| default_exp` directive controls where code exports to in the package.
 


The `#| default_exp` directive controls where code exports to in the package.
 


The `#| default_exp` directive controls where code exports to in the package.
 
The `#| default_exp` directive controls where code exports to in the package.
 