
# Testing Patterns for TinyTorch

## Test File Structure

### Module Tests (`modules/{module}/tests/test_{module}.py`)
- Test the educational module implementations
- Validate both student TODOs and hidden solutions
- Should work with both incomplete and complete implementations
- Import from the parent module's development file

### Package Tests (`tinytorch/tests/`)  
- Test the exported package functionality
- Integration tests across components
- Production-level validation

## Test Naming Convention

```python
# Module tests
modules/setup/tests/test_setup.py
modules/tensor/tests/test_tensor.py
modules/autograd/tests/test_autograd.py

# Package tests  
tinytorch/tests/test_tensor.py
tinytorch/tests/test_autograd.py
```

## Test Structure Pattern

```python
import pytest
import sys
import os

# Add parent directory to path for module imports
sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))

# Import from the module's development file
from {module}_dev import ComponentName

class TestComponentName:
    """Test suite for ComponentName functionality."""
    
    def test_basic_functionality(self):
        """Test basic component operations."""
        # Arrange
        component = ComponentName()
        
        # Act
        result = component.method()
        
        # Assert
        assert result == expected_value
    
    def test_edge_cases(self):
        """Test edge cases and error conditions."""
        with pytest.raises(ValueError):
            ComponentName(invalid_input)
    
    def test_integration(self):
        """Test integration with other components."""
        # Test how this component works with others
        pass
```

## Running Tests

```bash
# Test specific module
python bin/tito.py test --module tensor

# Test all modules
python bin/tito.py test --all

# Run specific test file directly
python -m pytest modules/tensor/tests/test_tensor.py -v

# Run from within module directory
cd modules/tensor && python -m pytest tests/ -v
```

## Test Categories

1. **Unit Tests**: Individual component functionality
2. **Integration Tests**: Component interactions  
3. **Educational Tests**: Validate learning objectives
4. **Package Tests**: End-to-end package validation

## Key Testing Principles

- Tests should pass with both TODO stubs and complete implementations
- Educational tests should guide student learning
- Package tests ensure production readiness
- All tests should be fast and isolated
- Use descriptive test names that explain what's being tested
- Import from module development files, not the package (for module tests)
 